AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  TwilioAccountSid:
    Type: String
    Description: Twilio Account SID
  TwilioAuthToken:
    Type: String
    Description: Twilio Auth Token
  TwilioPhoneNumber:
    Type: String
    Description: Twilio Phone Number
  S3ArtifactBucketName:
    Type: String
    Description: Bucket for template artifacts
  S3OutputBucketName:
    Type: String
    Description: Public bucket for output objects 
  RapidApiEndpoint:
    Type: String
    Description: The RapidAPI endpoint URL for HTML to image conversion
  RapidApiHost:
    Type: String
    Description: The RapidAPI host
  RapidApiKey:
    Type: String
    Description: The RapidAPI key
Resources:
  LambdaLayerWebhook:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: lambda-layer-webhook
      Description: Dependencies for Webhook Lambda
      Content:
        S3Bucket: !Ref S3ArtifactBucketName
        S3Key: lambda_layers/webhook/webhook.zip
      CompatibleRuntimes:
        - python3.9
  LambdaLayerOcr:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: lambda-layer-ocr
      Description: Dependencies for Ocr Lambda
      Content:
        S3Bucket: !Ref S3ArtifactBucketName
        S3Key: lambda_layers/ocr/ocr.zip
      CompatibleRuntimes:
        - python3.9
  LambdaLayerFlaskapp:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: lambda-layer-flaskapp
      Description: Dependencies for Flaskapp Lambda
      Content:
        S3Bucket: !Ref S3ArtifactBucketName
        S3Key: lambda_layers/flaskapp/flaskapp.zip
      CompatibleRuntimes:
        - python3.9
  HTMLtoImageLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: html-to-image-layer
      Description: Layer with requests library
      Content:
        S3Bucket: !Ref S3ArtifactBucketName
        S3Key: lambda_layers/html-to-image/html-to-image.zip
      CompatibleRuntimes:
        - python3.9
  # PuppeteerLayer:
  #   Type: AWS::Lambda::LayerVersion
  #   Properties:
  #     LayerName: puppeteer-layer
  #     Description: "Layer containing Puppeteer and Chromium"
  #     Content:
  #       S3Bucket: !Ref S3ArtifactBucketName
  #       S3Key: lambda_layers/html-to-image/puppeteer-layer.zip
  #     CompatibleRuntimes:
  #       - nodejs20.x
  # LambdaLayerCreateimage:
  #   Type: AWS::Lambda::LayerVersion
  #   Properties:
  #     LayerName: my-layer-1
  #     Description: Dependencies for Lambda function 1
  #     Content:
  #       S3Bucket: YOUR_S3_BUCKET_NAME
  #       S3Key: lambda_layer/.../.../.../layer1.zip # Get this right!
  #     CompatibleRuntimes:
  #       - python3.9
  # MyLambdaFunction1:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: MyLambdaFunction1
  #     Handler: views.lambda_handler
  #     Runtime: python3.9
  #     Role: arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_LAMBDA_EXECUTION_ROLE
  #     Code:
  #       S3Bucket: YOUR_S3_BUCKET_NAME
  #       S3Key: path/to/your/lambda_function_code.zip
  #     Layers:
  #       - Ref: MyLayer1
  #     Timeout: 30
  #     MemorySize: 128
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      SamResourceId: ApiGatewayCloudWatchRole
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchRole
        - Arn
    Metadata:
      SamResourceId: ApiGatewayAccount
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PollinatorAPI
      Description: API Gateway for Pollinator Serverless Application
      EndpointConfiguration:
        Types:
        - REGIONAL
      FailOnWarnings: true
    Metadata:
      SamResourceId: ApiGatewayRestApi
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      StageName: Prod
    DependsOn:
    - ApiGatewayMethodOcrPost
    - ApiGatewayMethodSmsPost
    Metadata:
      SamResourceId: ApiGatewayDeployment
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName:
        Fn::Sub: Prod-${AWS::StackName}-${AWS::Region}
      DeploymentId:
        Ref: ApiGatewayDeployment
      RestApiId:
        Ref: ApiGatewayRestApi
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: '*'
        LoggingLevel: INFO
        ResourcePath: /*
        MetricsEnabled: true
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
          - ApiGatewayLogGroup
          - Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
    Metadata:
      SamResourceId: ApiGatewayStage
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/apigateway/${ApiGatewayRestApi}
      RetentionInDays: 14
    Metadata:
      SamResourceId: ApiGatewayLogGroup
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - rekognition:DetectText
            Resource: '*'
          - Effect: "Allow"
            Action:
              - "s3:PutObject"
            Resource: 
              - !Sub "arn:aws:s3:::${S3OutputBucketName}/*"
          - Effect: "Allow"
            Action: 
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource: 
              - "arn:aws:s3:::${S3ArtifactBucketName}"
              - "arn:aws:s3:::${S3ArtifactBucketName}/*"
    Metadata:
      SamResourceId: LambdaExecutionRole
  WebhookLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: webhook.lambda_handler
      Runtime: python3.10
      CodeUri: lambda_functions/webhook/
      MemorySize: 128
      Timeout: 30
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          OCR_API_ENDPOINT:
            Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ocr
          TWILIO_ACCOUNT_SID:
            Ref: TwilioAccountSid
          TWILIO_AUTH_TOKEN:
            Ref: TwilioAuthToken
          TWILIO_PHONE_NUMBER:
            Ref: TwilioPhoneNumber
          OUTPUT_BUCKET:
            Ref: S3OutputBucketName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayRestApi
            Path: /sms
            Method: post
    Metadata:
      SamResourceId: WebhookLambdaFunction
  OcrLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ocr.lambda_handler
      Runtime: python3.10
      CodeUri: lambda_functions/ocr/
      MemorySize: 128
      Timeout: 30
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayRestApi
            Path: /ocr
            Method: post
    Metadata:
      SamResourceId: OcrLambdaFunction
  ApiGatewayResourceOcr:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: ocr
      RestApiId:
        Ref: ApiGatewayRestApi
    Metadata:
      SamResourceId: ApiGatewayResourceOcr
  ApiGatewayResourceSms:
    Type: AWS::ApiGateway::Resource
    Properties:
      Handler: html_to_image_api.lambda_handler
      Runtime: python3.9
      Code:
        S3Bucket: !Ref S3ArtifactBucketName
        S3Key: lambda_functions/html-to-image/html-to-image.zip
      Layers:
        - !Ref HTMLtoImageLayer
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          RAPIDAPI_ENDPOINT: !Ref RapidApiEndpoint
          RAPIDAPI_HOST: !Ref RapidApiHost
          RAPIDAPI_KEY: !Ref RapidApiKey
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      # Layers:
      #   - !Ref PuppeteerLayer
  # CreateimageLambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: createimage.lambda_handler
  #     Runtime: python3.9
  #     Code:
  #       S3Bucket: !Ref S3ArtifactBucketName
  #       S3Key: lambda_functions/createimage/createimage_package.zip
  #     Layers:
  #       - !Ref CreateImageLayerArn
  #     MemorySize: 128
  #     Timeout: 30
  #     Role:
  #       Fn::GetAtt:
  #       - LambdaExecutionRole
  #       - Arn
Outputs:
  ApiGatewayUrlSms:
    Description: URL of the API Gateway
    Value:
      Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/sms
    Export:
      Name: ApiGatewayUrlSms
